#! /bin/bash
CONFIG=$1
source $CONFIG  
 
echo -e "\e[36mMake alphabetization commands (records/record_alphabetize_commands_gen.sh"

bash scripts/make_alphabetize_commands.sh $CONFIG

echo -e "\e[32mRun alphabetization commands (records/record_alphabetize_COMMANDS.sh"

if [ $GEN_COMMANDS_ONLY != "T" ];then

  cat records/record_alphabetize_COMMANDS.sh | parallel -j30 --joblog logs/alphabetize_jobstatus.log &> logs/alphabetize_commands.log 
  
  echo -e "\e[34mLogged at logs/alphabetize_commands.log\e[39m"
  jobswitherrors=`tail -n +2 logs/alphabetize_jobstatus.log | awk -F'\t' '$7 != 0'`
  echo $jobswitherrors | awk -F' ' '{print $NF}' 
  


  #errorcodes=`awk -F'\t' '{print $7}' logs/alphabetize_jobstatus.log | tail -n +2 | grep -v "^0$"`
  echo $errorcodes
  errorlen=${#errorcodes}
  echo $errorlen 
  # Remove empty error files (meaning no error)
  # Parallel returns an empty stderr by default
  find "errors" -maxdepth 1 -name "error_alpha*" -empty -delete
  
  
  #Look for any errors and report. Error log is cleared out at each run so any new errors are from current run
 if [ "$errorlen" -gt 0 ]; then
    echo "errorfound"

    while read exp
      do
        if [ -f "$(find "errors" -maxdepth 1 -name "error_alpha*" | head -1)" ]
          then
            echo "Errors found while ordering identifiers of features"
            ls errors/error_alpha*
            exit 1
        fi
      done < $EXPLIST
  fi
  
  if [ -f "$(find "elutions/processed_elutions" -maxdepth 1 -name "*.feat.ordered" | head -1)" ] 
  then    
      echo -e "\e[35mFeature IDs alphabetized (elutions/processed_elutions/*.feat.ordered\e[39m)"
  fi
  
fi
